/*
Se le solicita realizar los siguientes incisos:
1. Consultar la cantidad de likes por publicación.*/

SELECT *
FROM TBL_PUBLICACIONES;

SELECT A.CODIGO_PUBLICACION, B.CONTENIDO_PUBLICACION, COUNT(*) CANTIDAD_LIKES
FROM TBL_LIKE_PUBLICACIONES A
INNER JOIN TBL_PUBLICACIONES B
ON (A.CODIGO_PUBLICACION = B.CODIGO_PUBLICACION)
GROUP BY A.CODIGO_PUBLICACION, B.CONTENIDO_PUBLICACION
ORDER BY CODIGO_PUBLICACION;

/*
2. Consultar la cantidad de likes por fotografía.*/
SELECT CODIGO_FOTO, COUNT(*) AS CANTIDAD_LIKES
FROM TBL_LIKE_FOTOGRAFIAS
GROUP BY CODIGO_FOTO;

SELECT *
FROM TBL_FOTOS;


/*
3. Consultar los grupos en los cuales la cantidad de usuarios sea mayor que 5, mostrar el nombre
del grupo y la cantidad de usuarios.*/

SELECT *
FROM TBL_GRUPOS;

--Utilizando inner join
SELECT A.CODIGO_GRUPO,B.NOMBRE_GRUPO, COUNT(*) AS CANTIDAD_USUARIOS
FROM TBL_GRUPOS_X_USUARIO A
INNER JOIN TBL_GRUPOS B
ON (A.CODIGO_GRUPO = B.CODIGO_GRUPO)
GROUP BY A.CODIGO_GRUPO, B.NOMBRE_GRUPO
HAVING COUNT(*)>5;

--Utilizando productos cartesianos
SELECT A.CODIGO_GRUPO,B.NOMBRE_GRUPO, COUNT(*) AS CANTIDAD_USUARIOS
FROM    TBL_GRUPOS_X_USUARIO A,
        TBL_GRUPOS B
WHERE A.CODIGO_GRUPO = B.CODIGO_GRUPO
GROUP BY A.CODIGO_GRUPO, B.NOMBRE_GRUPO
HAVING COUNT(*)>5;

/*
4. Mostrar la cantidad de amistades pendientes y rechazadas.
*/

SELECT  A.CODIGO_USUARIO,
        B.NOMBRE_ESTATUS,
        COUNT(*) CANTIDAD_SOLICITUDES
FROM TBL_AMIGOS A
INNER JOIN TBL_ESTATUS_SOLICITUDES B
ON (A.CODIGO_ESTATUS = B.CODIGO_ESTATUS)
WHERE A.CODIGO_ESTATUS IN (3,2)
GROUP BY A.CODIGO_USUARIO,
        B.NOMBRE_ESTATUS
ORDER BY CODIGO_USUARIO, NOMBRE_ESTATUS;


/*
SELECT
FROM
JOINS
WHERE
GROUP BY
HAVING
ORDER BY
*/
SELECT *
FROM TBL_ESTATUS_SOLICITUDES;

/*
5. Mostrar el usuario con mayor cantidad de amigos confirmados (El más cool).*/
SELECT MAX(CANTIDAD_AMIGOS)
FROM (
    SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_AMIGOS
    FROM TBL_AMIGOS
    WHERE CODIGO_ESTATUS=1
    GROUP BY CODIGO_USUARIO
    ORDER BY CODIGO_USUARIO
);


SELECT A.CODIGO_USUARIO, B.NOMBRE_USUARIO, COUNT(*) CANTIDAD_AMIGOS
FROM TBL_AMIGOS A
INNER JOIN TBL_USUARIOS B
ON (A.CODIGO_USUARIO = B.CODIGO_USUARIO)
WHERE CODIGO_ESTATUS=1
GROUP BY A.CODIGO_USUARIO, B.NOMBRE_USUARIO
HAVING COUNT(*) = (
    SELECT MAX(CANTIDAD_AMIGOS)
    FROM (
        SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_AMIGOS
        FROM TBL_AMIGOS
        WHERE CODIGO_ESTATUS=1
        GROUP BY CODIGO_USUARIO
        ORDER BY CODIGO_USUARIO
    )
)
ORDER BY CODIGO_USUARIO;

/*
6. Mostrar el usuario con más solicitudes rechazadas (Forever alone).*/
SELECT * 
FROM TBL_ESTATUS_SOLICITUDES;


SELECT A.CODIGO_USUARIO, B.NOMBRE_USUARIO, COUNT(*) CANTIDAD_RECHAZOS
FROM TBL_AMIGOS A
INNER JOIN TBL_USUARIOS B
ON (A.CODIGO_USUARIO = B.CODIGO_USUARIO)
WHERE CODIGO_ESTATUS=2
GROUP BY A.CODIGO_USUARIO, B.NOMBRE_USUARIO
HAVING COUNT(*) = (
    SELECT MAX(CANTIDAD_RECHAZOS)
    FROM (
        SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_RECHAZOS
        FROM TBL_AMIGOS
        WHERE CODIGO_ESTATUS=2
        GROUP BY CODIGO_USUARIO
        ORDER BY CODIGO_USUARIO
    )
)
ORDER BY CODIGO_USUARIO;

/*
7. Mostrar la cantidad de usuarios registrados mensualmente.*/
SELECT  TO_CHAR(FECHA_REGISTRO, 'MON/YYYY') as MES, 
        COUNT(*) CANTIDAD_USUARIOS_REGISTRADOS
FROM TBL_USUARIOS
GROUP BY TO_CHAR(FECHA_REGISTRO, 'MON/YYYY');

SELECT  FECHA_REGISTRO, 
        TO_CHAR(FECHA_REGISTRO, 'DD/MM/YYYY'),
        TO_CHAR(FECHA_REGISTRO, 'MON/YYYY')
FROM TBL_USUARIOS;


/*
8. Mostrar la edad promedio de los usuarios por género.*/
SELECT genero_usuario, round(avg(edad),2) edad_promedio
FROM TBL_USUARIOS
group by  genero_usuario;

/*
9. Con respecto al historial de accesos se necesita saber el crecimiento de los accesos del día 19 de
agosto del 2015 con respecto al día anterior, la fórmula para calcular dicho crecimiento se
muestra a continuación:
((b-a)/a) * 100
Donde:
a = Cantidad de accesos del día anterior (18 de Agosto del 2015)
b = Cantidad de accesos del día actual (19 de Agosto del 2015)
Mostrar el resultado como un porcentaje (Concatenar %)
*/


--ACCESOS DEL DIA ACTUAL (B)
SELECT COUNT(*)
FROM TBL_HISTORIAL_ACCESOS
WHERE FECHA_HORA_ACCESO = TO_DATE('19/08/2015', 'DD/MM/YYYY');

--ACCESOS DEL DIA ANTERIOR (A)
SELECT COUNT(*)
FROM TBL_HISTORIAL_ACCESOS
WHERE FECHA_HORA_ACCESO = TO_DATE('18/08/2015', 'DD/MM/YYYY');



SELECT (((
            SELECT COUNT(*)
            FROM TBL_HISTORIAL_ACCESOS
            WHERE FECHA_HORA_ACCESO = TO_DATE('19/08/2015', 'DD/MM/YYYY')
        )-(
            SELECT COUNT(*)
            FROM TBL_HISTORIAL_ACCESOS
            WHERE FECHA_HORA_ACCESO = TO_DATE('18/08/2015', 'DD/MM/YYYY')
        ))/(
            SELECT COUNT(*)
            FROM TBL_HISTORIAL_ACCESOS
            WHERE FECHA_HORA_ACCESO = TO_DATE('18/08/2015', 'DD/MM/YYYY')
        )) * 100 ||'%' AS CRECIMIENTO
FROM DUAL;


WITH A AS (
    SELECT COUNT(*) ACCESOS_DIA_ANTERIOR
    FROM TBL_HISTORIAL_ACCESOS
    WHERE FECHA_HORA_ACCESO = TO_DATE('18/08/2015', 'DD/MM/YYYY')
),
B AS (
    SELECT COUNT(*) ACCESOS_DIA_ACTUAL
    FROM TBL_HISTORIAL_ACCESOS
    WHERE FECHA_HORA_ACCESO = TO_DATE('19/08/2015', 'DD/MM/YYYY')
)
SELECT ((B.ACCESOS_DIA_ACTUAL-A.ACCESOS_DIA_ANTERIOR)/A.ACCESOS_DIA_ANTERIOR) * 100 AS CRECIMIENTO
FROM A,B;
/*

10. Crear una consulta que muestre lo siguiente:
• Nombre del usuario.
• País donde pertenece.
• Cantidad de publicaciones que tiene.
• Cantidad de amigos confirmados.
• Cantidad de likes que ha dado.
• Cantidad de fotos en las que ha sido etiquetado.
• Cantidad de accesos en el historial.
*/

SELECT A.CODIGO_USUARIO, A.NOMBRE_USUARIO, B.CODIGO_PAIS, B.NOMBRE_PAIS,
        NVL(C.CANTIDAD_PUBLICACIONES,0) CANTIDAD_PUBLICACIONES,
        NVL(D.AMIGOS_CONFIRMADOS,0) AMIGOS_CONFIRMADOS,
        NVL(E.LIKES_PUBLICACIONES,0) LIKES_PUBLICACIONES,
        NVL(F.LIKES_FOTOS,0) LIKES_FOTOS,
        NVL(E.LIKES_PUBLICACIONES,0) + NVL(F.LIKES_FOTOS,0) LIKES,
        NVL(G.ETIQUETAS_FOTOS,0)  ETIQUETAS_FOTOS,
        NVL(H.CANTIDAD_ACCESOS,0) CANTIDAD_ACCESOS
FROM TBL_USUARIOS A
INNER JOIN TBL_PAISES B
ON (A.CODIGO_PAIS = B.CODIGO_PAIS)
LEFT JOIN (
   --CANTIDAD DE PUBLICACIONES POR USUARIO
    SELECT CODIGO_USUARIO, COUNT(*) AS CANTIDAD_PUBLICACIONES
    FROM TBL_PUBLICACIONES
    GROUP BY CODIGO_USUARIO 
) C
ON (A.CODIGO_USUARIO = C.CODIGO_USUARIO)
LEFT JOIN (
    --• Cantidad de amigos confirmados.
    SELECT CODIGO_USUARIO, COUNT(*) AS AMIGOS_CONFIRMADOS
    FROM TBL_AMIGOS
    WHERE CODIGO_ESTATUS = 1
    GROUP BY CODIGO_USUARIO
) D
ON (A.CODIGO_USUARIO = D.CODIGO_USUARIO)
LEFT JOIN (
    --LIKES POR PUBLICACIONES
    SELECT CODIGO_USUARIO, COUNT(*) AS LIKES_PUBLICACIONES
    FROM TBL_LIKE_PUBLICACIONES
    GROUP BY CODIGO_USUARIO
) E
ON (A.CODIGO_USUARIO = E.CODIGO_USUARIO)
LEFT JOIN (
    SELECT CODIGO_USUARIO,COUNT(*) LIKES_FOTOS
    FROM TBL_LIKE_FOTOGRAFIAS
    GROUP BY CODIGO_USUARIO
) F
ON (A.CODIGO_USUARIO = F.CODIGO_USUARIO)
LEFT JOIN (
    --• Cantidad de fotos en las que ha sido etiquetado.
    SELECT CODIGO_USUARIO, COUNT(*) ETIQUETAS_FOTOS
    FROM TBL_ETIQUETA_FOTOGRAFIAS
    GROUP BY CODIGO_USUARIO
) G
ON (A.CODIGO_USUARIO = G.CODIGO_USUARIO)
LEFT JOIN (
    SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_ACCESOS
    FROM TBL_HISTORIAL_ACCESOS
    GROUP BY CODIGO_USUARIO
) H
ON (A.CODIGO_USUARIO = H.CODIGO_USUARIO)
ORDER BY A.CODIGO_USUARIO;

--CANTIDAD DE PUBLICACIONES POR USUARIO
SELECT CODIGO_USUARIO, COUNT(*) AS CANTIDAD_PUBLICACIONES
FROM TBL_PUBLICACIONES
GROUP BY CODIGO_USUARIO;

--• Cantidad de amigos confirmados.
SELECT CODIGO_USUARIO, COUNT(*) AS AMIGOS_CONFIRMADOS
FROM TBL_AMIGOS
WHERE CODIGO_ESTATUS = 1
GROUP BY CODIGO_USUARIO;


--LIKES POR PUBLICACIONES
SELECT CODIGO_USUARIO, COUNT(*) AS LIKES_PUBLICACIONES
FROM TBL_LIKE_PUBLICACIONES
GROUP BY CODIGO_USUARIO;

--LIKES A FOTOGRAFIAS
SELECT CODIGO_USUARIO,COUNT(*) LIKES_FOTOS
FROM TBL_LIKE_FOTOGRAFIAS
GROUP BY CODIGO_USUARIO;

--• Cantidad de fotos en las que ha sido etiquetado.
SELECT CODIGO_USUARIO, COUNT(*) ETIQUETAS_FOTOS
FROM TBL_ETIQUETA_FOTOGRAFIAS
GROUP BY CODIGO_USUARIO;


--• Cantidad de accesos en el historial.
SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_ACCESOS
FROM TBL_HISTORIAL_ACCESOS
GROUP BY CODIGO_USUARIO;